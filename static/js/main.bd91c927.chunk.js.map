{"version":3,"sources":["store/reducers/todo.js","store/reducers/todos.js","store/reducers/visibilityFilter.js","store/reducers/index.js","store/operation/addTodo.js","components/AddTodo/index.jsx","store/operation/setVsibilityFilter.js","components/link/index.jsx","components/FilterLink/index.jsx","components/Footer/index.jsx","store/operation/getVisibeTodos.js","store/operation/toggleTodo.js","components/todo/Todo.jsx","components/todoList/TodoList.jsx","components/VisibleTodoList/index.jsx","TodoApp.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["todo","state","action","type","id","text","completed","todos","undefined","map","t","visibilityFilter","filter","todoApp","combineReducers","nexteTodoId","addTodo","AddTodo","input","dispatch","ref","node","onClick","value","connect","setVisibilityFilter","Link","active","children","href","e","preventDefault","FilterLink","ownProps","Footer","getVisibleTodos","toggleTodo","Todo","style","textDecoration","TodoList","onTodoClick","VisibleTodoList","TodoApp","App","store","createStore","counterSlice","createSlice","name","initialState","reducers","increment","decrement","incrementByAmount","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd91c927.chunk.js","sourcesContent":["const todo = (state, action) => {\n    switch (action.type){\n        case 'ADD_TODO':\n            return {\n                id: action.id,\n                text: action.text,\n                completed: false\n            }\n        case 'TOGGLE_TODO':\n            if(state.id !== action.id){\n                return state;\n            }\n            return {\n                ...state,\n                completed: !state.completed\n            }\n        default:\n            return state;\n    }\n}\n\nexport default todo;","import todo from \"./todo\";\n\nconst todos = (state = [], action) =>{\n    switch (action.type) {\n        case 'ADD_TODO':\n            return [\n                ...state,\n                todo(undefined, action)\n            ];\n            \n        case 'TOGGLE_TODO':\n            return state.map( t => todo(t, action) )\n        default:\n            return state;\n    }\n}\n\nexport default todos;","const visibilityFilter = (\n    state = 'SHOW_ALL',\n    action\n) => {\n    switch (action.type) {\n        case 'SET_VISIBILITY_FILTER':\n            return action.filter;\n    \n        default:\n            return state;\n    }\n}\n\nexport default visibilityFilter;","import {combineReducers} from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\n\nconst todoApp = combineReducers({\n    todos,\n    visibilityFilter\n})\n\nexport default todoApp;","let nexteTodoId = 0;\n\nconst addTodo = (text) =>{\n    return {\n        type: 'ADD_TODO',\n        id: nexteTodoId++,\n        text\n    };\n};\n\nexport default addTodo;","import { connect } from \"react-redux\";\nimport addTodo from \"../../store/operation/addTodo\";\n\nlet AddTodo = ({dispatch}) =>{\n    let input;\n\n    return (\n        <div>\n            <input ref={node => {\n                input = node;\n            }}/>\n            <button onClick= {()=>{\n                dispatch(addTodo(input.value));\n                input.value = '';\n            }}>\n                Add Todo\n            </button>\n        </div>\n    )\n}\nAddTodo = connect()(AddTodo);\nexport default AddTodo;","const setVisibilityFilter = (filter) => {\n    return {\n        type: 'SET_VISIBILITY_FILTER',\n        filter\n    }\n}\n\nexport default setVisibilityFilter;","const Link = ({active, children, onClick}) => {\n    if(active)\n        return <span>{children}</span>\n    return (\n        <a href=\"#\"\n            onClick={\n                e => {\n                    e.preventDefault();\n                    onClick();\n                }\n            }\n        >\n            {children}\n        </a>\n    )\n}\n\nexport default Link;","import { connect } from 'react-redux';\nimport setVisibilityFilter from '../../store/operation/setVsibilityFilter';\nimport Link from '../link';\n\n\nconst mapStateToLinkProps = (\n    state,\n    ownProps\n) => {\n    return {\n        active:\n        ownProps.filter ===\n        state.visibilityFilter\n    }\n}\nconst mapDipathchToLinkProps = (\n    dispatch,\n    ownProps\n) => {\n    return {\n        onClick: () => {\n            dispatch(\n                setVisibilityFilter(ownProps.filter)\n            );\n        }\n    }\n}\n\nconst FilterLink = connect(\n    mapStateToLinkProps,\n    mapDipathchToLinkProps\n)(Link);\n\nexport default FilterLink;","import FilterLink from \"../FilterLink\"\n\n\n\nconst Footer = () => (\n    <p>\n        Show:\n        {' '}\n        <FilterLink filter = 'SHOW_ALL'>\n            All\n        </FilterLink>\n        {', '}\n        <FilterLink filter = 'SHOW_ACTIVE'>\n            Active\n        </FilterLink>\n        {', '}\n        <FilterLink filter = 'SHOW_COMPLETED'>\n            Completed\n        </FilterLink>\n    </p>\n)\n\nexport default Footer;","import todo from \"../reducers/todo\";\n\nconst getVisibleTodos = (\n    todos,\n    filter\n) => {\n    switch (filter) {\n        case 'SHOW_ALL':\n            return todos\n        case 'SHOW_COMPLETED':\n            return todos.filter(\n                t => t.completed\n            )\n        case 'SHOW_ACTIVE':\n            return todos.filter(\n                t => !t.completed\n            )\n        \n    }\n}\n\nexport default getVisibleTodos;","const toggleTodo = (id) => {\n    return {\n        type: 'TOGGLE_TODO',\n        id\n    };\n};\n\nexport default toggleTodo;","const Todo = ({\n    onClick,\n    completed,\n    text\n}) => (\n    <li\n        onClick={onClick}\n        style={{\n            textDecoration:\n                completed ?\n                    'line-through':\n                    'none'\n        }}\n    >\n        {text}\n    </li>\n)\n\nexport default Todo;","import Todo from \"../todo/Todo\"\n\nconst TodoList = ({\n    todos,\n    onTodoClick\n}) => (\n    <ul>\n        {todos.map(todo =>\n                <Todo\n                    key={todo.id}\n                    {...todo}\n                    onClick={() => onTodoClick(todo.id)}\n                />\n            )}\n    </ul>\n)\n\nexport default TodoList;","import { connect } from \"react-redux\"\nimport getVisibleTodos from \"../../store/operation/getVisibeTodos\"\nimport toggleTodo from \"../../store/operation/toggleTodo\"\nimport TodoList from \"../todoList/TodoList\"\n\n\nconst mapStateToTodoListProps = (\n    state\n) => {\n    return {\n        todos: getVisibleTodos(\n            state.todos,\n            state.visibilityFilter\n        ) \n    }\n}\nconst mapDispatchToTOdoListProps = (\n    dispatch\n) => {\n    return {\n        onTodoClick: (id) => {\n            dispatch(toggleTodo(id))\n        }\n    }\n}\n\nconst VisibleTodoList = connect(\n    mapStateToTodoListProps,\n    mapDispatchToTOdoListProps\n)(TodoList)\n\nexport default VisibleTodoList;","import AddTodo from \"./components/AddTodo\";\nimport Footer from \"./components/Footer\";\nimport VisibleTodoList from \"./components/VisibleTodoList\";\n\nconst TodoApp = () => (\n    <div>\n      <AddTodo />\n      <VisibleTodoList />\n      <Footer />\n    </div>\n  );\n\nexport default TodoApp","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux'\r\nimport todoApp from './store/reducers';\r\nimport TodoApp from './TodoApp';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Provider store = {createStore(todoApp)}>\r\n      <TodoApp />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}